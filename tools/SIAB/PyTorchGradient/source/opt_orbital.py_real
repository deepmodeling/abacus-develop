from global_function import ND_list
import inverse
import torch

class SIA:

	def cal_Q(self,QI,C):
		"""
		Q[ist][it][il][ib,ia*im*iu]
			= sum_{q} QI[ist][it][il][ib*ia*im,ie] * C[it][il][ie,iu]
		"""
		Q = ND_list(self.Nst)
		for ist in range(self.Nst):
			Q[ist] = ND_list(self.Nt[ist])
			for it in range(self.Nt[ist]):
				Q[ist][it] = ND_list(self.Nl[it])

		for ist in range(self.Nst):
			for it in range(self.Nt[ist]):
				for il in range(self.Nl[it]):
					Q[ist][it][il] = torch.mm( QI[ist][it][il], C[it][il] ).view(self.Nb[ist],-1)
		return Q

		
		
	def cal_S(self,SI,C):
		"""
		S[ist][it1][it2][il1][il2][ia1*im1*in1,ia2*im2*in2]
			= sum_{ie1 ie2} C[it1][il1][ie1,in1] * SI[ist][it1][it2][il1][il2][ie1,ia1,im1,ia2,im2,ie2] * C[it2][[il2][ie2,in2]
		"""
		S = ND_list(self.Nst)
		for ist in range(self.Nst):
			S[ist] = ND_list(self.Nt[ist],self.Nt[ist])
			for it1 in range(self.Nt[ist]):
				for it2 in range(self.Nt[ist]):
					S[ist][it1][it2] = ND_list(self.Nl[it1],self.Nl[it2])

		for ist in range(self.Nst):
			for it1 in range(self.Nt[ist]):
				for it2 in range(self.Nt[ist]):
					for il1 in range(self.Nl[it1]):
						for il2 in range(self.Nl[it2]):
							S[ist][it1][it2][il1][il2] = torch.mm( 
								C[it1][il1].t(),
								torch.mm( SI[ist][it1][it2][il1][il2].view(-1,self.Ne), C[it2][il2] ).view(self.Ne,-1)
								).view(self.Nn[it1][il1],self.Na[ist][it1]*self.Nm[il1],-1).transpose(0,1).view(self.Na[ist][it1]*self.Nm[il1]*self.Nn[it1][il1],-1)
		return S

		
		
	def cal_V(self,Q,S):
		"""
		V[ist][ib]
			= sum_{it1,ia1,il1,im1,in1} sum_{it2,ia2,il2,im2,in2}
			Q[ist][it1][il1][ib,ia1*im1*in1] * S[ist]{[it1][it2][il1][il2][ia1*im1*in1,ia2*im2*in2]}^{-1} * Q[ist][it2][il2][ib,ia2*im2*in2]
		"""
		V = ND_list(self.Nst)
		for ist in range(self.Nst):
			V[ist] = ND_list(self.Nb[ist])

		for ist in range(self.Nst):
		
			S_s = ND_list(self.Nt[ist])
			for it1 in range(self.Nt[ist]):
				S_st = ND_list(self.Nt[ist])
				for it2 in range(self.Nt[ist]):
					S_stt = ND_list(self.Nl[it1])
					for il1 in range(self.Nl[it1]):
						S_stt[il1] = torch.cat( S[ist][it1][it2][il1], dim=1 )
					S_st[it2] = torch.cat( S_stt, dim=0 )
				S_s[it1] = torch.cat( S_st, dim=1 )
			S_cat = torch.cat( S_s, dim=0 )
			
			S_I = inverse.inverse(S_cat)
#			S_I = 1/S_cat
			
			for ib in range(self.Nb[ist]):
			
				Q_s = ND_list(self.Nt[ist])
				for it in range(self.Nt[ist]):
					Q_s[it] = torch.cat([ Q_st[ib] for Q_st in Q[ist][it] ])
				Q_cat = torch.cat(Q_s)
			
				V[ist][ib] = torch.dot( Q_cat, torch.mv( S_I, Q_cat ) )
			
		return V